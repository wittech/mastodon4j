buildscript {
    ext.kotlin_version = '1.3.21'
    ext.supportTestVersion = '0.5'
    ext.okhttpVersion = '3.6.0'
    ext.rxJavaVersion = '2.0.8'
    ext.gsonVersion = '2.8.0'

    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.14.0'
    }
}
apply plugin: 'kotlin'
apply plugin: 'maven'

group = "com.sys1yagi"
version = '1.8.0'

allprojects {
    repositories {
        mavenLocal()
        maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
        maven {url 'http://maven.aliyun.com/nexus/content/repositories/google'}
        maven {
            credentials {
                username "mvn_read_ws"
                password "mrk8929"
            }
            url "http://mvn.cloud.alipay.com/nexus/content/repositories/releases/"
        }
        maven {
            url "http://developer.huawei.com/repo/"
        }
        maven {
            url "http://qt.qunar.com/package/mvn/repository/maven-qim/"
        }
        google()
    }
}

repositories {
    mavenLocal()
    maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
    maven {url 'http://maven.aliyun.com/nexus/content/repositories/google'}
    maven {
        credentials {
            username "mvn_read_ws"
            password "mrk8929"
        }
        url "http://mvn.cloud.alipay.com/nexus/content/repositories/releases/"
    }
    maven {
        url "http://developer.huawei.com/repo/"
    }
    maven {
        url "http://qt.qunar.com/package/mvn/repository/maven-qim/"
    }
    google()
}
dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}
